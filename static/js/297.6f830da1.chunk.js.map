{"version":3,"file":"static/js/297.6f830da1.chunk.js","mappings":"6OAQMA,GAAcC,EAAAA,EAAAA,GAAiB,IAoBrC,GAAeC,EAAAA,EAAAA,GAAwB,CACrCC,KAAM,wBADR,EAlBuB,SAACC,GACtB,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,KAAK,iBACLC,YAAY,wBACZC,SAAU,CAACC,EAAAA,EAAUb,QAGzB,0BACE,6C,UCrBR,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yBCgBjN,EATmB,SAACI,GAClB,IAAMU,EAAI,mBAAeV,EAAMW,IAE/B,OACE,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACE,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBV,EAAMM,UCHhC,EAJgB,SAACN,GACf,OAAO,gBAAKY,UAAWC,EAAhB,SAA4Bb,EAAMe,WCyD3C,EA7CgB,SAACf,GACf,IAAIgB,EAAkBhB,EAAMiB,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAClD,SAAC,EAAD,CAA4Bd,KAAMc,EAAOd,KAAMK,GAAIS,EAAOT,IAAzCS,EAAOT,OAGtBU,EAAmBrB,EAAMiB,YAAYK,SAASH,KAAI,SAACJ,GAAD,OACpD,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQJ,OA4BxB,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAiCG,KACjC,iBAAKJ,UAAWC,EAAhB,WACE,yBAAMQ,KACN,SAAC,EAAD,CAAgBpB,SAVA,SAACsB,GAErBvB,EAAMwB,YAAYD,EAAOE,0B,2CCzCvBC,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,SC0CvB,GAAeE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KA9BsB,SAACJ,GACvB,MAAO,CACLV,YAAaU,EAAMV,gBAII,SACzBe,GAEA,MAAO,CAELR,YAAa,SAACC,GAAD,OAA4BO,GAASC,EAAAA,EAAAA,GAAcR,UDpBpC,SAAKS,GAYnC,OAFEH,EAAAA,EAAAA,IAAQL,EAARK,EATwB,SAAC/B,GACzB,IAAM4B,EAAyB5B,EAAzB4B,OAAWO,GAAjB,OAA+BnC,EAA/B,GAEA,OAAK4B,GAEE,SAACM,GAAD,UAAgBC,KAFH,SAAC,KAAD,CAAUrB,GAAG,gBCkCrC,CAGEsB","sources":["components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import { InjectedFormProps, Field, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../utils/validators\";\nimport { Textarea } from \"../../common/FormControls/FormControl\";\n\nexport type FormDataType = {\n  newMessageBody: string;\n};\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          name=\"newMessageBody\"\n          placeholder=\"Enter your message...\"\n          validate={[required, maxLength50]}\n        />\n      </div>\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm<FormDataType>({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import { NavLink } from \"react-router-dom\";\nimport s from \"../Dialogs.module.css\";\n\ntype DialogItemProps = {\n  name: string;\n  id: number;\n};\n\nconst DialogItem = (props: DialogItemProps) => {\n  const path = `/dialogs/${props.id}`;\n\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\nexport default DialogItem;\n","import s from \"../Dialogs.module.css\";\n\ntype MessageProps = {\n  message: string;\n};\n\nconst Message = (props: MessageProps) => {\n  return <div className={s.message}>{props.message}</div>;\n};\n\nexport default Message;\n","// import { ActionsType } from \"../../redux/store\";\nimport { MessagesPageType } from \"../../redux/dialogs-reducer\";\nimport AddMessageForm, { FormDataType } from \"./AddMessageForm/AddMessageForm\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport s from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\n\ntype DialogsProps = {\n  dialogsPage: MessagesPageType;\n  isAuth: boolean;\n  sendMessage: (newMessageBody: string) => void;\n  // changeMessage: (text: string) => void;\n  // dispatch: (action: ActionsType) => void;\n};\n\n// type FormDataType = {\n//   newMessageBody: string;\n// };\n\nconst Dialogs = (props: DialogsProps) => {\n  let dialogsElements = props.dialogsPage.dialogs.map((dialog) => (\n    <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} />\n  ));\n\n  let messagesElements = props.dialogsPage.messages.map((message) => (\n    <Message key={message.id} message={message.message} />\n  ));\n\n  // const newMessageElement = createRef<HTMLTextAreaElement>();\n\n  // const sendMessage = () => {\n  //   // if (newMessageElement.current) {\n  //   //   props.dispatch(sendMessageAC());\n  //   // }\n  //   props.sendMessage();\n  // };\n\n  // if (!props.isAuth) {\n  //   return <Redirect to=\"/login\" />;\n  // }\n\n  // const handleChangeMessage = () => {\n  //   if (newMessageElement.current) {\n  //     // props.dispatch(updateNewMessageAC(newMessageElement.current.value));\n  //     props.changeMessage(newMessageElement.current.value);\n  //   }\n  // };\n\n  const addNewMessage = (values: FormDataType) => {\n    // alert(values.newMessageBody);\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        <div>{messagesElements}</div>\n        <AddMessageForm onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import { Redirect } from \"react-router-dom\";\nimport { AppRootState } from \"../redux/redux-store\";\nimport { connect } from \"react-redux\";\nimport { ComponentType } from \"react\";\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport const withAuthRedirect = <T,>(Component: ComponentType<T>) => {\n  const RedirectComponent = (props: MapStatePropsType) => {\n    let { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to=\"/login\" />;\n\n    return <Component {...(restProps as T & {})} />;\n  };\n\n  let ConnectedAuthRedirectComponent =\n    connect(mapStateToProps)(RedirectComponent);\n\n  return ConnectedAuthRedirectComponent;\n};\n","import { connect } from \"react-redux\";\nimport { Dispatch, compose } from \"redux\";\nimport {\n  DialogsActionsType,\n  MessagesPageType,\n  sendMessageAC,\n} from \"../../redux/dialogs-reducer\";\nimport { AppRootState } from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { ComponentType } from \"react\";\n\ntype DialogsContainerProps = {};\n\ntype MapStateProps = {\n  dialogsPage: MessagesPageType;\n  // isAuth: boolean;\n};\n\ntype MapDispatchProps = {\n  // changeMessage: (text: string) => void;\n  sendMessage: (newMessageBody: string) => void;\n};\n\nconst mapStateToProps = (state: AppRootState): MapStateProps => {\n  return {\n    dialogsPage: state.dialogsPage,\n    // isAuth: state.auth.isAuth,\n  };\n};\nconst mapDispatchToProps = (\n  dispatch: Dispatch<DialogsActionsType>\n): MapDispatchProps => {\n  return {\n    // changeMessage: (text: string) => dispatch(updateNewMessageAC(text)),\n    sendMessage: (newMessageBody: string) => dispatch(sendMessageAC(newMessageBody)),\n  };\n};\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n//  (props: any) => {\n//   if (!props.isAuth) {\n//     return <Redirect to=\"/login\" />;\n//   }\n\n//   return <Dialogs {...props}/>\n// }\n\n// const DialogsContainer = connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(AuthRedirectComponent);\n\nexport default compose<ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"names":["maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","path","id","className","s","to","message","dialogsElements","dialogsPage","dialogs","map","dialog","messagesElements","messages","values","sendMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Dialogs"],"sourceRoot":""}